@title Welcome to Wrangler -- an Erlang Refactorer 

@copyright 2006-2011 Huiqing Li, Simon Thompson

@author Huiqing Li , Simon Thompson
        [http://www.cs.kent.ac.uk/projects/wrangler]
@version 0.9.3
@doc

<p> Wrangler is an Erlang refactoring tool that supports interactive refactoring of Erlang programs.
</p>

<h3><a name="Contents">Contents</a></h3>
<ol>
  <li><a href="#Introduction">Introduction</a></li>
  <li><a href="#The Interface of Wrangler">The Interface of Wrangler</a></li>
  <li><a href="#Macros">Support for Macros</a></li>
  <li><a href="#Refactoring Code with Syntax Errors">Refactoring Code with Syntax Errors</a> </li>
  <li><a href="#Types">Typed Records and Type Specifications</a></li>
  <li><a href="#References">References</a></li>
  <li><a href="#Acknowledgements">Acknowledgements</a></li>
</ol>

<h3><a name="Introduction"> Introduction</a></h3>
<p> Refactoring is the process of improving the design of a program without changing its external behaviour. While refactoring by hand is possible, tool support for refactoring is invaluable as it is more reliable, and allows refactoring to be done (or undone) easily.  Wrangler is such a tool that supports interactive refactoring of Erlang programs. The current snapshot of Wrangler supports a number of basic Erlang refactorings, such as renaming of variable/function/module names, generalisation of a function definition, etc. </p>
<p> Built on top of the functionalities provided by the Erlang <em> syntax-tools</em> package, Wrangler
is embedded in the Emacs editing environment, and makes use of the functionalities provided by Distel, an Emacs-based user interface toolkit for Erlang, to manage the communication between the refactoring tool and Emacs.</p>
<p>  In collaboration with the <a href="http://erlide.sourceforge.net">Erlide</a> team, we are now also in the process of integrating Wrangler with the Eclipse Environment.
</p>

<h3><a name="The Interface of Wrangler"> The Interface of Wrangler</a></h3>
<p> Below is a snapshot of Wrangler embedded in Emacs, which shows a particular refactoring scenario. The user has selected the expression <code> io:format("Hello") </code> in the definition of <code> repeat/1 </code>, has chosen the <em>Generalise Function Definition </em> command from the <em> Refactor </em> sub-menu, and has just entered a new parameter name A in the mini-buffer. </p>
<img src="Wrangler1.JPG" alt=" "> </img>

<p>The result of this refactoring is shown in the snapshot below.</p>

<img src="Wrangler2.JPG" alt=" "> </img>

<p> Preview of the changes to be made by a refactoring is supported, and the user could choose to commit or abort the refactoring result after preview.</p>

<p> All the implemented refactorings are module-aware. In the case that a refactoring affects more 
than one module in the program, a message telling which files have been modified by the refactorer 
will be given after the refactoring has been successfully done. The <em>Customize Wrangler </em> command 
from the <em> Refactor </em> sub-menu allows the user to specify the boundary of the program, i.e. the directories that will be searched and analysed by the refactorer, as shown in the example snapshot below.</p>

<img src="customize.JPG" alt=" "> </img>


<p> <em>Undo </em> is supported by the refactorer. Applying undo once will revert the program back 
to the status right before the last refactoring performed. However, PLEASE NOTE that the refactorer undo is currently separate from the Emacs undo, and undoing a refactoring will lose all the editing activities after the refactoring. </p>

<p> Below is a snapshot of Wrangler embedded in Eclipse + Erlide.</p>
<img src="Erlide.JPG" alt=" "> </img>

<h3><a name="Macros">Support for Macros</a></h3>

<p>Wrangler makes use of functionalities provided by the <code>epp_dodger</code> module from Erlang <em>SyntaxTools</em> to parse Erlang source code, and should be able to 
refactor Erlang modules containing preprocessor directives and macro applications, as long as the macro definitions are syntactically "well-behaved".</p> 

<h3><a name="Refactoring Code with Syntax Errors">Refactoring Code with Syntax Errors</a></h3>
<p> Wrangler accepts Erlang programs with syntax errors or macro definitions that cannot be 
parsed by <em>SyntaxTools</em>. In the case that the program under consideration has syntax errors or unparsable 
macros, functions/attributes to which these syntax errors belong are not affected by the refactoring process, 
however warning messages asking for manual inspection of those parts of the program are given after the refactoring.
</p>
<h3><a name="Types">Typed Records and Type Specification</a></h3>
<p> The current implementation of Wrangler does not support typed records and type specifications yet; functionalities to support these features are being added however.
</p>
<h3><a name="References"> References</a></h3>
<p> Our <a href="http://www.cs.kent.ac.uk/projects/refactor-fp/">Refactoring
Functional Programs</a> project website contains more information and references about refactoring functional, 
especially Haskell, programs; and our progress and ideas about refactoring Erlang programs are available at our 
<a href="http://www.cs.kent.ac.uk/projects/forse/"> FORSE </a> project webpage. </p>

<h3><a name="Acknowledgements"> Acknowledgements</a></h3>

The work was initially supported by EPSRC in the UK, and is now by the European Commission. We are very grateful that we were able to build the tool on top of 
<a href="http://code.google.com/p/distel/">Distel</a>, 
<a href="http://www.erlang.org/doc/apps/syntax_tools/index.html"> Erlang SyntaxTools</a>
and make use some of the ideas from <a href="http://www.it.uu.se/research/group/hipe/dialyzer/"> DIALYZER</a>.
@end
