
			-*- html -*-

	Evaluator overview page

@title Erlang Teaching Tool for Symbolic Evaluation
@copyright 2014 Gabriela Sampaio, Simon Thompson
@author Gabriela Sampaio <gaby.sampaio@gmail.com>
@author Simon Thompson <s.j.thompson@kent.ac.uk>
        
@doc The Erlang Teaching Tool for Symbolic Evaluation was created 
with the aim of teaching how expressions are evaluated in Erlang.

== Contents ==

<ol>
  <li>{@section Introduction}</li>
  <li>{@section Download}</li>
  <li>{@section Symbolic Transformations}</li>
  <li>{@section How to use}</li>
</ol>

== Introduction ==
Symbolic evaluation is a form of static program execution in which symbolic expressions are used to represent arbitrary values of program variables and computations. This tool was created with the aim of teaching how expressions are evaluated in Erlang. The tool is able to evaluate not only arbitrary expressions, but also symbolic ones. The tool can be used by any Erlang programmer, but is more useful for beginners or teachers in the area. The idea is that the user can interact with the application by evaluating an expression step-by-step. <br/><br/>
Symbolic transformations were created using Wrangler API. Wrangler is the refactoring tool for Erlang and it is user-extensible, i.e., users can create their own refactorings. With this possibility, some simplifications were built and are used in this project. 

== Symbolic Transformations ==
Some symbolic transformations were created in the project. Expressions are simplified according to this set of transformations. To make the tool more organized and easier to understand, we divided the transformations into eight categories:
<ul>
<li><a href="../core/core_arithmetics.html">Arithmetic Operators</a></li>
<li><a href="../core/core_boolean_operators.html">Boolean Operators</a></li>
<li><a href="../core/core_case.html">Case Blocks</a></li>
<li><a href="../core/core_funApp.html">Function Calls</a></li>
<li><a href="../core/core_if.html">If Blocks</a></li>
<li><a href="eval_inline_variable.html">Inline Variable</a></li>
<li><a href="../core/core_lists_concat.html">Lists Concatenations</a></li>
<li><a href="../core/core_unreferenced_assign.html">Unreferenced Assignments</a></li>
</ul>

These simplifications are always used together. Thus, if the user types an expression that can be simplified by more than one type of evaluator, they are both used and each one simplifies a part of the expression. 

== Download ==
The tool is distributed with the Wrangler tool. The user needs to download Wrangler from the Github website [https://github.com/RefactoringTools/Wrangler], and run the evaluator in the Erlang shell.

== How to use ==
To use the evaluator, the user needs to have Wrangler and Erlang installed. The application works in the Erlang shell. To start the evaluator, one of the functions <i>start/1</i> and <i>start/2</i> should be called. This function is described in the <a href="evaluator.html">Evaluator</a> module. After the evaluator is started, two inputs are needed: <br/>
- <b>An expression</b>: the user should write Erlang files containing definitions (modules, functions) and ideally, this expression should use these definitions. The expression can be a function call, an arithmetic calculation, a lists concatenation, etc.<br/> 
- <b>A number of steps</b>: the user can choose a number of steps to be applied in the evaluation process. This number can be:<br/>
     *A positive number: steps are applied "forward" in the evaluation process. <br/>
     *A negative number: the respective number of steps are undone. <br/>
     *"F" or "f" (for "full"): all steps are applied. <br/>

At the end of each iteration, the user has the chance to continue with the evaluation or start a new evaluation. If the user chooses to continue with the current evaluation, the only input requested is a new number of steps to be applied. Otherwise, the user chooses
a new expression to be evaluated and a new evaluation is started.
